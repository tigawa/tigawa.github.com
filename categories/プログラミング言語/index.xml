<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>プログラミング言語 on For myself tomorrow</title><link>https://igawa.blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E/</link><description>Recent content in プログラミング言語 on For myself tomorrow</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 29 Dec 2022 14:58:30 +0900</lastBuildDate><atom:link href="https://igawa.blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E/index.xml" rel="self" type="application/rss+xml"/><item><title>Goモジュール</title><link>https://igawa.blog/golang/go%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/</link><pubDate>Thu, 29 Dec 2022 14:58:30 +0900</pubDate><guid>https://igawa.blog/golang/go%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/</guid><description>go mod tidy Go 1.15 まで、 go build, go test などのコマンドを実行するタイミングで、自動的に外部ライブラリをダウンロードされていた。 Go 1.16 から、go mod tidy コマンドを手動で実行する必要がある 明示的にバージョンを指定する場合 コミットID=abcdef999を指定する場合
go mod edit -replace github.com/hoge/xxx@v1.0.0=github.com/igawa/xxx@abcdef999</description></item><item><title>文字列フォーマットの世界</title><link>https://igawa.blog/golang/string/</link><pubDate>Tue, 27 Dec 2022 23:57:01 +0900</pubDate><guid>https://igawa.blog/golang/string/</guid><description>&lt;p>&lt;code>%#v&lt;/code>を指定すると構造体の型名、フィールド名、値をわかりやすく表示します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang"> &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Foo&lt;/span>{&lt;span style="color:#a6e22e">Bar&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">Baz&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello, W+D Press!&amp;#34;&lt;/span>}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%#v \n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span>)
&lt;span style="color:#75715e">// =&amp;gt; &amp;amp;main.Foo{Bar:1, Baz:&amp;#34;Hello, W+D Press!&amp;#34;}
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>%v&lt;/code>を指定すると構造体の値のみを表示します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang"> &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Foo&lt;/span>{&lt;span style="color:#a6e22e">Bar&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">Baz&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello, W+D Press!&amp;#34;&lt;/span>}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%v \n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span>)
&lt;span style="color:#75715e">// =&amp;gt; &amp;amp;{1 Hello, W+D Press!}
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>演算子のオーバーロード</title><link>https://igawa.blog/c-sharp/%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AD%E3%83%BC%E3%83%89/</link><pubDate>Sat, 28 Sep 2019 15:33:45 +0900</pubDate><guid>https://igawa.blog/c-sharp/%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AD%E3%83%BC%E3%83%89/</guid><description>&lt;p>&lt;code>operator&lt;/code> キーワードを使うと演算子をオーバーロードして自分で定義することができます。&lt;/p></description></item><item><title>可変長引数</title><link>https://igawa.blog/c-sharp/%E5%8F%AF%E5%A4%89%E9%95%B7%E5%BC%95%E6%95%B0/</link><pubDate>Sat, 28 Sep 2019 11:44:43 +0900</pubDate><guid>https://igawa.blog/c-sharp/%E5%8F%AF%E5%A4%89%E9%95%B7%E5%BC%95%E6%95%B0/</guid><description>&lt;p>C#の可変長引数は、params 修飾子をつけます。&lt;/p></description></item><item><title>mainメソッド</title><link>https://igawa.blog/c-sharp/main_method/</link><pubDate>Sat, 07 Sep 2019 12:04:41 +0900</pubDate><guid>https://igawa.blog/c-sharp/main_method/</guid><description>&lt;p>mainメソッドの4つのオーバロード&lt;/p></description></item><item><title>静的クラスと静的コンストラクタ</title><link>https://igawa.blog/c-sharp/static_class/</link><pubDate>Sat, 07 Sep 2019 11:43:30 +0900</pubDate><guid>https://igawa.blog/c-sharp/static_class/</guid><description>&lt;p>静的クラスと静的コンストラクタについてまとめます。&lt;/p></description></item><item><title>Dictionaryを継承してgetしたときに該当データがない場合は、TValueで指定されたクラスをnewして返す方法</title><link>https://igawa.blog/c-sharp/tec1/</link><pubDate>Sat, 31 Aug 2019 12:11:56 +0900</pubDate><guid>https://igawa.blog/c-sharp/tec1/</guid><description>&lt;p>Dictionaryを継承してgetしたときに該当データがない場合は、TValueで指定されたクラスをnewして返す方法を紹介します。&lt;/p>
&lt;h3 id="ポイント">ポイント&lt;/h3>
&lt;ul>
&lt;li>アクセサをオーバライドする。&lt;/li>
&lt;li>TValueをwhereで限定することで、メソッド内で new TValue()を可能にできる。 (これはJavaではできない。いいところ！)&lt;/li>
&lt;/ul></description></item><item><title>参照パラメータと出力パラメータ</title><link>https://igawa.blog/c-sharp/ref_out/</link><pubDate>Thu, 15 Aug 2019 13:07:09 +0900</pubDate><guid>https://igawa.blog/c-sharp/ref_out/</guid><description>参照パラメータ ref をつけると結果を呼び出し側に返すことができる。
使い方 int a = 0; Console.WriteLine(a); obj.Sqr(ref a); Console.WriteLine(a); public void Sqr(ref int i) { i = i * i; } 制限事項 ref を宣言するとnullを設定することはできない
出力パラーメタ out をつけると結果を呼び出し側に返すことができる。
使い方 bool isSquare; int a = RectInfo(30, 30, out isSquare); public int RectInfo(int side1, int side2, out bool isSquare) { if(side1==side2) isSquare = true; else isSquare = false; return side1 * side2; } 制限事項 out を指定した引数には必ず値を設定しないと行けない。 設定しないとコンパイルエラーになる。</description></item><item><title>文字列</title><link>https://igawa.blog/c-sharp/string/</link><pubDate>Thu, 15 Aug 2019 12:28:01 +0900</pubDate><guid>https://igawa.blog/c-sharp/string/</guid><description>&lt;p>よくつかう文字列に関する部品をJavaとC#で対比してまとめます。&lt;/p></description></item><item><title>ざっとC#の歴史</title><link>https://igawa.blog/c-sharp/first/</link><pubDate>Wed, 30 Jan 2019 23:58:19 +0900</pubDate><guid>https://igawa.blog/c-sharp/first/</guid><description>&lt;p>C#について、勉強したことを自分のために少しづつまとめていきます。&lt;/p></description></item></channel></rss>