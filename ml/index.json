[
    {
        "ref": "https://tigawa.github.io/ml/scikit-learn-algorithm-cheat-sheet/",
        "title": "scikit-learn algorithm cheat-sheet の歩き方",
        "section": "ml",
        "date" : "2019.03.10",
        "body": "scikit-learn algorithm cheat-sheet をどのように使えばよいか整理しました。\n機械学習には色々な特性のモデルがあり、algorithm cheat-sheetはどのモデルを使用すればよか導いてくれるものです。\n若干意味がわからないところもありましたが、ざっと翻訳して吹き出しをつけました。 整理して気がついたこと。  分類と回帰問題は、10万件のサンプルデータを堺に分岐してますね。 クラスタリングと次元削減は、１万件のサンプルデータを堺に分岐してますね。 テキストデータには、Naive Bayesを使用するんですね。  余裕があれば、もう少し整理したいと思います。\n"
    }
,
    {
        "ref": "https://tigawa.github.io/ml/numpy-cheat/",
        "title": "NumPyチートシート",
        "section": "ml",
        "date" : "2019.01.27",
        "body": " NumPy 行列の生成 基本 \u0026ldquo;1\u0026rdquo;要素の配列 Y = np.ones([5,3]) print(Y) [[ 1. 1. 1.] [ 1. 1. 1.] [ 1. 1. 1.] [ 1. 1. 1.] [ 1. 1. 1.]]  基本 \u0026ldquo;0\u0026rdquo;要素の配列 Y = np.zeros([5,3]) print(Y) [[ 0. 0. 0.] [ 0. 0. 0.] [ 0. 0. 0.] [ 0. 0. 0.] [ 0. 0. 0.]]  基本 配列指定 X = np.array([[1,1,1], [2,2,2]]) print(X) [[1 1 1] [2 2 2]]  基本 範囲指定 X = np.arange(9) print(X) [0 1 2 3 4 5 6 7 8] Z = X.reshape([3,3]) print(Z) [[0 1 2] [3 4 5] [6 7 8]]  基本 ランダムな数値の行列を生成 X = np.random.random_sample((2, 2, 2)) print(X) [[[ 0.34358208 0.50170926] [ 0.34160139 0.50989413]] [[ 0.26411979 0.44274355] [ 0.68313713 0.98779943]]]  NumPyの書式 [1次元目=開始:終了:間隔, 2次元目=開始:終了:間隔, \u0026hellip;] Z = np.ones((8,8)) Z[::2, ::2] = 0 Z[1::2, 1::2] = 0 print(Z) [[ 0. 1. 0. 1. 0. 1. 0. 1.] [ 1. 0. 1. 0. 1. 0. 1. 0.] [ 0. 1. 0. 1. 0. 1. 0. 1.] [ 1. 0. 1. 0. 1. 0. 1. 0.] [ 0. 1. 0. 1. 0. 1. 0. 1.] [ 1. 0. 1. 0. 1. 0. 1. 0.] [ 0. 1. 0. 1. 0. 1. 0. 1.] [ 1. 0. 1. 0. 1. 0. 1. 0.]]  タイプを指定して行列の作成 NumPyは、C言語で高速に処理しています。適切な型を指定することで内部のメモリ量を節約します。\n# タイプを指定して初期化 X = np.array([255,255,255,0], dtype=np.ubyte) print(X.dtype) # タイプの変更 X = X.astype(np.int64) print(X.dtype)  条件に一致する値を抽出する。 Z = np.arange(11) print(Z) [ 0 1 2 3 4 5 6 7 8 9 10] print((3 \u0026lt; Z) \u0026amp; (Z \u0026lt;= 8)) [False False False False True True True True True False False]  へー　これで、Trueと、Falseの配列が返ってくるんだね。\nprint(Z[(3 \u0026lt; Z) \u0026amp; (Z \u0026lt;= 8)]) [4 5 6 7 8]  更に、Z[]で囲ってあげると、Trueの箇所だけ取り出せます。\n更に、-1をかけて上書き\nZ[(3 \u0026lt; Z) \u0026amp; (Z \u0026lt;= 8)]　*= -1 print(Z) [ 0 1 2 3 -4 -5 -6 -7 -8 9 10]  "
    }
,
    {
        "ref": "https://tigawa.github.io/ml/pandas_lambda/",
        "title": "pandasで特定の項目を編集する方法",
        "section": "ml",
        "date" : "2016.12.23",
        "body": "pandasで特定の項目を編集する方法を紹介します。\n\n以下は、時刻から時間だけを抽出します。\n サンプルコード\ntrain_df['time'].apply(lambda x: x.split(':')[0])  実行結果\n  19:30 -\u0026gt; 19\n参考サイト 以下のサイトを参考にさせて頂きました。 ありがとうございます。\nhttp://sinhrks.hatenablog.com/entry/2015/06/18/221747\n"
    }
,
    {
        "ref": "https://tigawa.github.io/ml/pandas_map/",
        "title": "pandasで性別を数値に変更する方法",
        "section": "ml",
        "date" : "2016.07.18",
        "body": "pandasで性別コードを数値に変更する方法を紹介します。\n機械学習するためには、全て数値(float)に変換する必要があります。\n性別も同じです。\n\n今回は、male,femaleで入っているコードを1,0の数値に変換します。\ndf['Sexnum'] = df['Sex'].map({'female': 0, 'male': 1})   df[\u0026lsquo;Sexnum\u0026rsquo;]項目を追加して、そのに数値に変換した値を設定します。  以上です。\n"
    }
,
    {
        "ref": "https://tigawa.github.io/ml/unique/",
        "title": "pandasでindexを設定する方法",
        "section": "ml",
        "date" : "2016.07.17",
        "body": "pandasでindexを設定する方法を紹介します。\nindexに指定する値は、ユニークである必要があります。\n\n \u0026lsquo;PassengerId\u0026rsquo; がユニークかどうかチェックします。\nassert len(df) == len(df['PassengerId'].unique())  ユニークだったので、indexに設定します。\ndf.set_index('PassengerId', inplace=True)   inplaceは破壊的メソッドにしてくれる設定です。 これを付けないと、破壊的メソッドにはなりません。   以上です。\n"
    }
,
    {
        "ref": "https://tigawa.github.io/ml/loc/",
        "title": "pandasで特定の条件に一致する行の、特定の項目を更新する方法",
        "section": "ml",
        "date" : "2016.07.17",
        "body": "pandasで特定の条件に一致する行の、特定の項目を更新する方法を紹介します。\nデータから特徴点を抽出して加工するさいに多様すると思います。\n\n やりたいこと\n チケットの料金(Fare)を分類したい。 FareCteg項目を追加して分類したい。  # チケットの料金を分類するため、'FareCteg'項目を追加 df_train['FareCateg'] = \u0026quot;0: \u0026lt;10\u0026quot; # パラメータの第１引数に条件を指定して一致する場合に、第２引数で示した'Farecteg'に値を設定する df_train.loc[df_train['Fare'].values \u0026gt;= 10, 'FareCateg'] = \u0026quot;1: 10\u0026lt;20\u0026quot; df_train.loc[df_train['Fare'].values \u0026gt;= 20, 'FareCateg'] = \u0026quot;2: 20\u0026lt;30\u0026quot; df_train.loc[df_train['Fare'].values \u0026gt;= 30, 'FareCateg'] = \u0026quot;3: 30+\u0026quot;  特記事項\n locはメソッドではない、２次元配列を指定するイメージ 第２引数に、いきなり存在しないカラムを指定してもOK　-\u0026gt; 指定したカラムが自動的に追加される。 更新する項目名を複数指定することも可能  df_train.loc[[0,2], ['FareCateg','FareCateg']] = 'xxxx'   第２引数に複数の項目名を指定する場合は、存在しない項目名を指定するとエラーになる。   以上です。\n"
    }
,
    {
        "ref": "https://tigawa.github.io/ml/dropna/",
        "title": "dataFrameから欠損値を削除",
        "section": "ml",
        "date" : "2016.07.16",
        "body": "欠損値があると、機械学習する際にエラーになるため、何かしら値を埋める必要があります。\nですが、とりあえず欠損値を覗いてくれるのがこれです。\n\ndfna = df.dropna();  dfはデータフレーム\nこれで欠損値が除外できます。\n参考サイト 以下のサイトを参考にさせて頂きました。 ありがとうございます。\nhttp://qiita.com/okadate/items/7b9620a5e64b4e906c42\n"
    }
,
    {
        "ref": "https://tigawa.github.io/ml/pandas_cheat/",
        "title": "pandasのチートシート",
        "section": "ml",
        "date" : "2016.07.16",
        "body": "以下のサイトにpandasのチートシートがありました。 ありがとうございます。\nhttp://www.analyticsvidhya.com/blog/2015/07/11-steps-perform-data-analysis-pandas-python/\n\n"
    }
,
    {
        "ref": "https://tigawa.github.io/ml/plot_bar/",
        "title": "ピボットテーブルを棒グラフで表示する",
        "section": "ml",
        "date" : "2016.07.16",
        "body": "前回ピボットテーブルで、割合を表示するテクニックを載せました。\n今回はその応用で、割合を棒グラフで表示する方法を紹介します。\n\n コード\npt2.plot(kind='bar', ylim=(0,1))   ylimは、ｙ軸の表示メモリの範囲を指定します。\n今回は割合なので、0から1までをy軸のメモリとしています。\npt2は、前回の記事を参照してください。\n 出力結果  \n"
    }
,
    {
        "ref": "https://tigawa.github.io/ml/pivot2/",
        "title": "pandasでピボットテーブルで割合を表示する。",
        "section": "ml",
        "date" : "2016.07.16",
        "body": "前回ピボットテーブルの表示の仕方を載せました。\n今回はその応用で、割合を表示したいと思います。\n\n本題はここから  コード  pt2 = pt.apply(lambda x : x/sum(x), axis=1) pt2  pt(ピポットテーブル)については、前回の記事を参考にしてください。\naxis=0 にすると縦方向の割合を表示してくれます。\n 結果     survived 0 1   sex pclass       female 2 0.500000 0.500000   3 0.000000 1.000000   male 2 0.833333 0.166667   3 1.000000 0.000000    "
    }
,
    {
        "ref": "https://tigawa.github.io/ml/pivot/",
        "title": "pandasでピボットテーブルを扱う",
        "section": "ml",
        "date" : "2016.07.16",
        "body": "pandasでピボットテーブルを扱う方法を紹介します。\n今後、機械学習でデータを分析する際に多用しそうなのでメモします。\nイラストのパンダとpandasは一切関係ありません！\n\nここから本題 何はともあれ、ピボットテーブルを生成するコードはこれです！！\nテストデータの作成からピボットテーブルの作成までのコードは最後に載せておきます。\n ピボットテーブルの生成\npt = pd.pivot_table(df, # 集計したい縦のキー index=['sex','pclass'], # 集計したい横のキー(複数指定化) columns='survived', # 集計したい項目 (指定がなければ、上記のキーになっていない項目) values='id', # 個数をカウントする。これがないとValuesの平均値になる。 aggfunc=lambda x : len(x), # # NaN を 0埋めする fill_value = 0, ) pt  結果表示\n     survived 0 1   sex pclass       female 2 1 1   3 0 1   male 2 5 1   3 1 0     テストデータの作成からピボットテーブルの作成までのコードです。\n 必要なライブラリを読み込み\n%matplotlib inline import pandas as pd import random  データの準備\nrg = range(0,10) title = ['id','sex','pclass','survived'] sex = [random.choice(['female','male']) for i in rg] pclass = [random.choice([1,2,3]) for i in rg] survived = [random.choice([0,1]) for i in rg] survived_list = list(zip(rg, sex, pclass, survived))  データフレームに変換\ndf = pd.DataFrame(survived_list, columns=title) df  テストデータの作成\n     id sex pclass survived     0 0 male 2 0   1 1 male 2 0   2 2 female 2 1   3 3 male 2 0   4 4 female 3 1   5 5 male 2 0   6 6 female 2 0   7 7 male 2 1   8 8 male 3 0   9 9 male 2 0      ピボットテーブルの生成\npt = pd.pivot_table(df, # 集計したい縦のキー index=['sex','pclass'], # 集計したい横のキー(複数指定化) columns='survived', # 集計したい項目 (指定がなければ、上記のキーになっていない項目) values='id', # 個数をカウントする。これがないとValuesの平均値になる。 aggfunc=lambda x : len(x), # # NaN を 0埋めする fill_value = 0, ) pt  結果表示\n     survived 0 1   sex pclass       female 2 1 1   3 0 1   male 2 5 1   3 1 0    "
    }
,
    {
        "ref": "https://tigawa.github.io/ml/archives/",
        "title": "機械学習",
        "section": "ml",
        "date" : "2016.01.02",
        "body": "過去の記事を全てみる\n   基本1 基本2 応用     NumPy     ピボットテーブル dataFrame 欠損値を削除    ピボットテーブル -\u0026gt; 割合 dataFrame 項目更新    ピボットテーブル -\u0026gt; 棒グラフ dataFrame indexの設定    ピボットテーブル -\u0026gt; 棒グラフ dataFrame 項目の編集(lambda)      pandas チートシート pandasでよく使う文法まとめ  "
    }
]
