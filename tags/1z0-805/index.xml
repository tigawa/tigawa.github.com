<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>1Z0-805 on For myself tomorrow</title><link>https://tigawa.github.io/tags/1z0-805/</link><description>Recent content in 1Z0-805 on For myself tomorrow</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 13 Aug 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://tigawa.github.io/tags/1z0-805/index.xml" rel="self" type="application/rss+xml"/><item><title>ReentrantReadWriteLock</title><link>https://tigawa.github.io/blog/2013/08/13/reentrantreadwritelock/</link><pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/08/13/reentrantreadwritelock/</guid><description>&lt;p>javaで&lt;code>synchronized&lt;/code>よりロックの競合を少なくさせる方法&lt;/p></description></item><item><title>アトミック変数</title><link>https://tigawa.github.io/blog/2013/08/03/atomic/</link><pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/08/03/atomic/</guid><description>&lt;h1 id="アトミック変数とは">アトミック変数とは？&lt;/h1>
&lt;p>java6から追加されたクラスです。&lt;/p>
&lt;p>変数の読込みと書込みの一連の処理を保証しており、複数スレッドからのアクセスに高いスループットを達成できます。&lt;/p></description></item><item><title>並行コレクション</title><link>https://tigawa.github.io/blog/2013/08/03/concurrenthashmap/</link><pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/08/03/concurrenthashmap/</guid><description>&lt;p>従来の同期化コレクションは、パフォーマンスが劣化する可能性がありましたが、並行コレクションは複数スレッドから並列アクセスを前提に高いスループットを実現できます。&lt;/p></description></item><item><title>java5 スレッドプール</title><link>https://tigawa.github.io/blog/2013/07/30/java5-threadpool/</link><pubDate>Tue, 30 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/30/java5-threadpool/</guid><description>&lt;p>java5からスレッドプールというユーティリティーが追加されました。&lt;/p>
&lt;p>今まで自分で実装していた処理なども、既にjavaが用意してくれているので使わない手はないですよね？&lt;/p>
&lt;p>ということで、スレッドプールについてまとめています。&lt;/p></description></item><item><title>並行処理ユーティリティー</title><link>https://tigawa.github.io/blog/2013/07/23/concurrent-utilies/</link><pubDate>Tue, 23 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/23/concurrent-utilies/</guid><description>&lt;p>Java5から追加された並行処理ユーティリティー(Concurrent Utilities)が、結構使えそうなので概要をまとめます。&lt;/p></description></item><item><title>java7 ダイヤモンド演算子</title><link>https://tigawa.github.io/blog/2013/07/20/java7-diamond/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/20/java7-diamond/</guid><description>&lt;p>これは楽ちん、ジェネリクスの記載がjava7から簡単になります。&lt;/p></description></item><item><title>java7 マルチキャッチ</title><link>https://tigawa.github.io/blog/2013/07/20/java7-multi-catch/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/20/java7-multi-catch/</guid><description>&lt;p>java7から複数の例外を１つのcatchブロックでキャッチできるようになりました。&lt;/p>
&lt;p>これがマルチキャッチ!!&lt;/p></description></item><item><title>JDBC4.0 ラージオブジェクト</title><link>https://tigawa.github.io/blog/2013/07/20/java7-jdbc4-dot-0/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/20/java7-jdbc4-dot-0/</guid><description>&lt;p>JDBC3.0ではBLOBとCLOBをサポートしていましたが、JDBC4.0ではNCLOBもサポートするようになりました。&lt;/p></description></item><item><title>JDBCドライバーの自動ロード</title><link>https://tigawa.github.io/blog/2013/07/20/java7-jdbc/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/20/java7-jdbc/</guid><description>&lt;p>JDBC 4.0からJDBCドライバを自動ロードする機能が追加されました。&lt;/p>
&lt;p>そのためJDBCドライバのロード処理を明示的に記載する必要がなくなりました。&lt;/p></description></item><item><title>java7 try-with-resources文</title><link>https://tigawa.github.io/blog/2013/07/18/java7-try-with-resources/</link><pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/18/java7-try-with-resources/</guid><description>&lt;p>Java7から、クローズ処理を明示的に呼び出さなくても、自動で呼び出させるようになりました。&lt;/p>
&lt;p>これからはクローズ漏れの心配はないですね。&lt;/p></description></item><item><title>java7 アンダースコアを使った数値表記</title><link>https://tigawa.github.io/blog/2013/07/18/java7-underscore/</link><pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/18/java7-underscore/</guid><description>&lt;p>Java7から数値リテラルで、アンダースコアの表記が使えるよになりました。&lt;/p>
&lt;p>カンマの代わりに使えば見やすくなりますね。&lt;/p></description></item><item><title>java7 ２進数のリテラル表記</title><link>https://tigawa.github.io/blog/2013/07/18/java7-0b/</link><pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/18/java7-0b/</guid><description>&lt;p>Java7から、２進数のリテラル表記ができるようになりました。&lt;/p></description></item><item><title>Java7 switch文</title><link>https://tigawa.github.io/blog/2013/07/17/java7-switch/</link><pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/17/java7-switch/</guid><description>&lt;p>&lt;a href="http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=516&amp;amp;p_org_id=70&amp;amp;lang=JA">1Z0-805 Upgrade to Java SE7&lt;/a>を受験するために、しばらくの間JavaSE7のネタをチョクチョク書き込んで行きまーす。&lt;/p></description></item></channel></rss>