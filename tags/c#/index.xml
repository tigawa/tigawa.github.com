<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on For myself tomorrow</title><link>https://www.igawa.blog/tags/c#/</link><description>Recent content in C# on For myself tomorrow</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 28 Sep 2019 15:33:45 +0900</lastBuildDate><atom:link href="https://www.igawa.blog/tags/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>演算子のオーバーロード</title><link>https://www.igawa.blog/c-sharp/%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AD%E3%83%BC%E3%83%89/</link><pubDate>Sat, 28 Sep 2019 15:33:45 +0900</pubDate><guid>https://www.igawa.blog/c-sharp/%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AD%E3%83%BC%E3%83%89/</guid><description>&lt;p>&lt;code>operator&lt;/code> キーワードを使うと演算子をオーバーロードして自分で定義することができます。&lt;/p></description></item><item><title>可変長引数</title><link>https://www.igawa.blog/c-sharp/%E5%8F%AF%E5%A4%89%E9%95%B7%E5%BC%95%E6%95%B0/</link><pubDate>Sat, 28 Sep 2019 11:44:43 +0900</pubDate><guid>https://www.igawa.blog/c-sharp/%E5%8F%AF%E5%A4%89%E9%95%B7%E5%BC%95%E6%95%B0/</guid><description>&lt;p>C#の可変長引数は、params 修飾子をつけます。&lt;/p></description></item><item><title>mainメソッド</title><link>https://www.igawa.blog/c-sharp/main_method/</link><pubDate>Sat, 07 Sep 2019 12:04:41 +0900</pubDate><guid>https://www.igawa.blog/c-sharp/main_method/</guid><description>&lt;p>mainメソッドの4つのオーバロード&lt;/p></description></item><item><title>静的クラスと静的コンストラクタ</title><link>https://www.igawa.blog/c-sharp/static_class/</link><pubDate>Sat, 07 Sep 2019 11:43:30 +0900</pubDate><guid>https://www.igawa.blog/c-sharp/static_class/</guid><description>&lt;p>静的クラスと静的コンストラクタについてまとめます。&lt;/p></description></item><item><title>Dictionaryを継承してgetしたときに該当データがない場合は、TValueで指定されたクラスをnewして返す方法</title><link>https://www.igawa.blog/c-sharp/tec1/</link><pubDate>Sat, 31 Aug 2019 12:11:56 +0900</pubDate><guid>https://www.igawa.blog/c-sharp/tec1/</guid><description>&lt;p>Dictionaryを継承してgetしたときに該当データがない場合は、TValueで指定されたクラスをnewして返す方法を紹介します。&lt;/p>
&lt;h3 id="ポイント">ポイント&lt;/h3>
&lt;ul>
&lt;li>アクセサをオーバライドする。&lt;/li>
&lt;li>TValueをwhereで限定することで、メソッド内で new TValue()を可能にできる。 (これはJavaではできない。いいところ！)&lt;/li>
&lt;/ul></description></item><item><title>参照パラメータと出力パラメータ</title><link>https://www.igawa.blog/c-sharp/ref_out/</link><pubDate>Thu, 15 Aug 2019 13:07:09 +0900</pubDate><guid>https://www.igawa.blog/c-sharp/ref_out/</guid><description>参照パラメータ ref をつけると結果を呼び出し側に返すことができる。
使い方 int a = 0; Console.WriteLine(a); obj.Sqr(ref a); Console.WriteLine(a); public void Sqr(ref int i) { i = i * i; } 制限事項 ref を宣言するとnullを設定することはできない
出力パラーメタ out をつけると結果を呼び出し側に返すことができる。
使い方 bool isSquare; int a = RectInfo(30, 30, out isSquare); public int RectInfo(int side1, int side2, out bool isSquare) { if(side1==side2) isSquare = true; else isSquare = false; return side1 * side2; } 制限事項 out を指定した引数には必ず値を設定しないと行けない。 設定しないとコンパイルエラーになる。</description></item><item><title>文字列</title><link>https://www.igawa.blog/c-sharp/string/</link><pubDate>Thu, 15 Aug 2019 12:28:01 +0900</pubDate><guid>https://www.igawa.blog/c-sharp/string/</guid><description>&lt;p>よくつかう文字列に関する部品をJavaとC#で対比してまとめます。&lt;/p></description></item><item><title>ざっとC#の歴史</title><link>https://www.igawa.blog/c-sharp/first/</link><pubDate>Wed, 30 Jan 2019 23:58:19 +0900</pubDate><guid>https://www.igawa.blog/c-sharp/first/</guid><description>&lt;p>C#について、勉強したことを自分のために少しづつまとめていきます。&lt;/p></description></item></channel></rss>