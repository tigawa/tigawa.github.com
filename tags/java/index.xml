<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on For myself tomorrow</title><link>https://tigawa.github.io/tags/java/</link><description>Recent content in java on For myself tomorrow</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 04 Mar 2018 14:37:06 +0900</lastBuildDate><atom:link href="https://tigawa.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>jerseyの紹介</title><link>https://tigawa.github.io/blog/2018/03/04/jersey/</link><pubDate>Sun, 04 Mar 2018 14:37:06 +0900</pubDate><guid>https://tigawa.github.io/blog/2018/03/04/jersey/</guid><description>&lt;p>jersey(ジャージー)について紹介します。&lt;/p>
&lt;p>jerseyとは、 Sun による JAX-RS のリファレンス実装です。
つまりは、JAX-RS という、RESTful APIを作るのに特化した仕様があり、それをSunが実装したものです。&lt;/p>
&lt;p>jersey以外にも、JAX-RS実装はいくつかあります。&lt;/p></description></item><item><title>JPAで特定の項目だけ更新する方法</title><link>https://tigawa.github.io/blog/2016/07/21/jpa_update/</link><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2016/07/21/jpa_update/</guid><description>&lt;p>JPAで特定の項目だけ更新する方法を紹介します。&lt;/p></description></item><item><title>ReentrantReadWriteLock</title><link>https://tigawa.github.io/blog/2013/08/13/reentrantreadwritelock/</link><pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/08/13/reentrantreadwritelock/</guid><description>&lt;p>javaで&lt;code>synchronized&lt;/code>よりロックの競合を少なくさせる方法&lt;/p></description></item><item><title>HashMapを順読込みした時の速度が気になった</title><link>https://tigawa.github.io/blog/2013/08/03/map-speed/</link><pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/08/03/map-speed/</guid><description>&lt;p>JavaでHashMapのキー（文字列）を先頭一致で比較しながら、順次読み込んで行くとどのくらい時間がかかるのか気になったので試してみました。&lt;/p>
&lt;p>とりあえず、5000件のデータで検証します。&lt;/p>
&lt;p>検証したソースコードと実行結果を下記に載せます。&lt;/p></description></item><item><title>JavaのMapを順次読み込む方法</title><link>https://tigawa.github.io/blog/2013/08/03/map-for/</link><pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/08/03/map-for/</guid><description>&lt;p>JavaでMapで順次読み込む方法をよく忘れるのでまとめます。&lt;/p></description></item><item><title>アトミック変数</title><link>https://tigawa.github.io/blog/2013/08/03/atomic/</link><pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/08/03/atomic/</guid><description>&lt;h1 id="アトミック変数とは">アトミック変数とは？&lt;/h1>
&lt;p>java6から追加されたクラスです。&lt;/p>
&lt;p>変数の読込みと書込みの一連の処理を保証しており、複数スレッドからのアクセスに高いスループットを達成できます。&lt;/p></description></item><item><title>並行コレクション</title><link>https://tigawa.github.io/blog/2013/08/03/concurrenthashmap/</link><pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/08/03/concurrenthashmap/</guid><description>&lt;p>従来の同期化コレクションは、パフォーマンスが劣化する可能性がありましたが、並行コレクションは複数スレッドから並列アクセスを前提に高いスループットを実現できます。&lt;/p></description></item><item><title>java5 スレッドプール</title><link>https://tigawa.github.io/blog/2013/07/30/java5-threadpool/</link><pubDate>Tue, 30 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/30/java5-threadpool/</guid><description>&lt;p>java5からスレッドプールというユーティリティーが追加されました。&lt;/p>
&lt;p>今まで自分で実装していた処理なども、既にjavaが用意してくれているので使わない手はないですよね？&lt;/p>
&lt;p>ということで、スレッドプールについてまとめています。&lt;/p></description></item><item><title>並行処理ユーティリティー</title><link>https://tigawa.github.io/blog/2013/07/23/concurrent-utilies/</link><pubDate>Tue, 23 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/23/concurrent-utilies/</guid><description>&lt;p>Java5から追加された並行処理ユーティリティー(Concurrent Utilities)が、結構使えそうなので概要をまとめます。&lt;/p></description></item><item><title>java7 ダイヤモンド演算子</title><link>https://tigawa.github.io/blog/2013/07/20/java7-diamond/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/20/java7-diamond/</guid><description>&lt;p>これは楽ちん、ジェネリクスの記載がjava7から簡単になります。&lt;/p></description></item><item><title>java7 マルチキャッチ</title><link>https://tigawa.github.io/blog/2013/07/20/java7-multi-catch/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/20/java7-multi-catch/</guid><description>&lt;p>java7から複数の例外を１つのcatchブロックでキャッチできるようになりました。&lt;/p>
&lt;p>これがマルチキャッチ!!&lt;/p></description></item><item><title>JDBC4.0 ラージオブジェクト</title><link>https://tigawa.github.io/blog/2013/07/20/java7-jdbc4-dot-0/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/20/java7-jdbc4-dot-0/</guid><description>&lt;p>JDBC3.0ではBLOBとCLOBをサポートしていましたが、JDBC4.0ではNCLOBもサポートするようになりました。&lt;/p></description></item><item><title>JDBCドライバーの自動ロード</title><link>https://tigawa.github.io/blog/2013/07/20/java7-jdbc/</link><pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/20/java7-jdbc/</guid><description>&lt;p>JDBC 4.0からJDBCドライバを自動ロードする機能が追加されました。&lt;/p>
&lt;p>そのためJDBCドライバのロード処理を明示的に記載する必要がなくなりました。&lt;/p></description></item><item><title>java7 try-with-resources文</title><link>https://tigawa.github.io/blog/2013/07/18/java7-try-with-resources/</link><pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/18/java7-try-with-resources/</guid><description>&lt;p>Java7から、クローズ処理を明示的に呼び出さなくても、自動で呼び出させるようになりました。&lt;/p>
&lt;p>これからはクローズ漏れの心配はないですね。&lt;/p></description></item><item><title>java7 アンダースコアを使った数値表記</title><link>https://tigawa.github.io/blog/2013/07/18/java7-underscore/</link><pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/18/java7-underscore/</guid><description>&lt;p>Java7から数値リテラルで、アンダースコアの表記が使えるよになりました。&lt;/p>
&lt;p>カンマの代わりに使えば見やすくなりますね。&lt;/p></description></item><item><title>java7 ２進数のリテラル表記</title><link>https://tigawa.github.io/blog/2013/07/18/java7-0b/</link><pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/18/java7-0b/</guid><description>&lt;p>Java7から、２進数のリテラル表記ができるようになりました。&lt;/p></description></item><item><title>Java7 switch文</title><link>https://tigawa.github.io/blog/2013/07/17/java7-switch/</link><pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/07/17/java7-switch/</guid><description>&lt;p>&lt;a href="http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=516&amp;amp;p_org_id=70&amp;amp;lang=JA">1Z0-805 Upgrade to Java SE7&lt;/a>を受験するために、しばらくの間JavaSE7のネタをチョクチョク書き込んで行きまーす。&lt;/p></description></item><item><title>warタスクでMETA-INFフォルダに特定のファイルを含める方法</title><link>https://tigawa.github.io/blog/2013/05/22/java2/</link><pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/05/22/java2/</guid><description>warファイルを生成する際にMETA-INFフォルダに特定のファイルを含めたくて探していたら、次のサイトにやり方で実装できました。ありがたや、ありがたや
参考サイト</description></item><item><title>windowsのファイル共有からファイルを読み込む方法</title><link>https://tigawa.github.io/blog/2013/05/22/java/</link><pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate><guid>https://tigawa.github.io/blog/2013/05/22/java/</guid><description>&lt;p>&lt;a href="http://jcifs.samba.org/">JCIFS&lt;/a>を使って実現します。&lt;/p>
&lt;h1 id="jcifsとは">JCIFSとは？&lt;/h1>
&lt;ul>
&lt;li>JCIFSはCIFS/SMBプロトコルを実装したオープンソースのJavaライブラリです。&lt;/li>
&lt;li>CIFSはMicrosoftのWindowsプラットフォーム上のファイル共有プロトコルです。&lt;/li>
&lt;li>JCIFSを使用するとJavaアプリケーションからWindows共有ネットワークにアクセスできます。&lt;/li>
&lt;li>LGPLで公開されています。&lt;/li>
&lt;/ul></description></item></channel></rss>